@page "/books/update/{id:int}"
@inject IBookService bookService 
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Administrator")]

<h3>Edit Book</h3>

<EditForm Model="Book" OnValidSubmit="HandleUpdateBook">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        <label for="title">Title</label>
        <InputText @bind-Value="Book.Title" class="form-control" id="title"/>
        <ValidationMessage For="@(()=> Book.Title)"/>
    </div><br />
    <div class="form-group">
        <label for="isbn">ISBN</label>
        <InputText @bind-Value="Book.Isbn" class="form-control" id="isbn"/>
        <ValidationMessage For="@(()=> Book.Isbn)"/>
    </div><br />
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber @bind-Value="Book.Price" class="form-control" id="price"/>
        <ValidationMessage For="@(()=> Book.Price)"/>
    </div><br />
    <div class="form-group">
        <label for="price">Year</label>
        <InputNumber @bind-Value="Book.Year" class="form-control" id="year"/>
        <ValidationMessage For="@(()=> Book.Year)"/>
    </div><br />
    <div class="form-group">
        <label for="summary">Summary</label>
        <InputTextArea @bind-Value="Book.Summary" class="form-control" id="summary"/>
        <ValidationMessage For="@(()=> Book.Summary)"/>
    </div><br />
    <div class="form-group">
        <label for="author">Author</label>
        <InputSelect @bind-Value="Book.AuthorId" class="form-select" id="author">
            <option value="">--Select Author--</option>
            @foreach(var author in Authors)
            {
                <option value="@author.Id">@author.FirstName @author.LastName</option>
            }
        </InputSelect>
    </div><br />
    <div class="form-group">
        <InputFile OnChange="HandleFileSelection"/>
        <img src="@img" width="100" height="100" class="img-thumbnail" />
        <p class="text-danger">@UploadFileWarning</p>
    </div>
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Edit Author
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back to list
    </button>
</EditForm>

@code {
    [Parameter] 
    public int id { get; set; }

    private BookUpdateDto Book = new();
    private string UploadFileWarning = string.Empty;
    private string img = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        var response = await bookService.GetAsync(id);
        if (response.Success)

            Book = response.Data.toBookUpdateDto();
            img = Book.Image;
    }

    private async Task HandleUpdateBook()
    {
        Book.Id = id;
        var response = await bookService.EditAsync(id, Book);
        if (response.Success)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        navManager.NavigateTo("/books/");
    }

        private async Task HandleFileSelection(InputFileChangeEventArgs evento)
    {
        var file = evento.File;
        if(file != null)
        {
            var ext = System.IO.Path.GetExtension(file.Name);

            if(ext.ToLower().Contains("jpg") ||
            ext.ToLower().Contains("png") ||
            ext.ToLower().Contains("jpeg"))
            {
                var byteArray = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(byteArray);
                string imageType = file.ContentType;
                string base64 = Convert.ToBase64String(byteArray);

                Book.ImageData = base64;
                Book.OriginalImageName = file.Name;
                img = $"data:{imageType}; base64, {base64}";
            }
            else
            {
                UploadFileWarning = "Please select a valid iamge file (*.jpg | *.png)";
            }
        }
    }
}

